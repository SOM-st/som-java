# -*- mode: yaml -*-
# Config file for ReBench
default_experiment: all
default_data_file: 'rebench.data'

reporting:
    # Benchmark results will be reported to ReBenchDB
    rebenchdb:
        # this url needs to point to the API endpoint
        db_url: https://rebench.stefan-marr.de/rebenchdb
        repo_url: https://github.com/smarr/SOM-java
        record_all: true # make sure everything is recorded
        project_name: SOM

runs:
    max_invocation_time: 120

benchmark_suites:
    macro:
        gauge_adapter: RebenchLog
        command: &MACRO_CMD "-cp Smalltalk:Examples/Benchmarks/Richards:Examples/Benchmarks/DeltaBlue:Examples/Benchmarks/NBody:Examples/Benchmarks/Json:Examples/Benchmarks/GraphSearch Examples/Benchmarks/BenchmarkHarness.som %(benchmark)s %(iterations)s "
        iterations: 10
        benchmarks:
            - Richards:     {extra_args: 1}
            - DeltaBlue:    {extra_args: 50}
            - NBody:        {extra_args: 500}
            - JsonSmall:    {extra_args: 1}
            - GraphSearch:  {extra_args: 4}
            - PageRank:     {extra_args: 40}

    micro:
        gauge_adapter: RebenchLog
        command: "-cp Smalltalk:Examples/Benchmarks/LanguageFeatures Examples/Benchmarks/BenchmarkHarness.som %(benchmark)s %(iterations)s "
        iterations: 10
        benchmarks:
            - Fannkuch:     {extra_args: 6}
            - Fibonacci:    {extra_args: 3}
            - Dispatch:     {extra_args: 2}
            - Bounce:       {extra_args: 2}
            - Loop:         {extra_args: 5}
            - Permute:      {extra_args: 3}
            - Queens:       {extra_args: 2}
            - List:         {extra_args: 2}
            - Recurse:      {extra_args: 3}
            - Storage:      {extra_args: 1}
            - Sieve:        {extra_args: 4}
            - BubbleSort:   {extra_args: 3}
            - QuickSort:    {extra_args: 1}
            - Sum:          {extra_args: 2}
            - Towers:       {extra_args: 2}
            - TreeSort:     {extra_args: 1}
            - IntegerLoop:  {extra_args: 2}
            - FieldLoop:    {extra_args: 1}
            - WhileLoop:    {extra_args: 10}
            - Mandelbrot:   {extra_args: 30}
            - IfNil:        {extra_args: 4}
            - Knapsack:     {extra_args: 5}
            - VectorBenchmark: {extra_args: 2}

    micro-somsom:
        gauge_adapter: RebenchLog
        command: "-cp Smalltalk:Examples/Benchmarks/LanguageFeatures Examples/Benchmarks/BenchmarkHarness.som %(benchmark)s %(iterations)s 0 "
        iterations: 1
        benchmarks:
            - Loop:         {extra_args: 1}
            - Queens:       {extra_args: 1}
            - List:         {extra_args: 1}
            - Recurse:      {extra_args: 1}
            - Mandelbrot:   {extra_args: 3}

    interpreter:
        description: Basic interpreter benchmarks for comparing performance of most basic concepts.
        gauge_adapter: RebenchLog
        invocations: 5
        command: "-cp Smalltalk:Examples/Benchmarks/Interpreter Examples/Benchmarks/BenchmarkHarness.som %(benchmark)s %(iterations)s 1"
        benchmarks:
            - ArgRead
            - ArrayReadConst
            - ArrayWriteConstConst
            - BlockSend0ConstReturn
            - Const
            - FieldConstWrite
            - FieldRead
            - FieldReadIncWrite
            - FieldReadWrite
            - GlobalRead
            - LocalConstWrite
            - LocalRead
            - LocalReadIncWrite
            - LocalReadWrite
            - SelfSend0
            - SelfSend0BlockConstNonLocalReturn

executors:
    som:  {path: ., executable: som.sh}
    somsom:
        path: .
        executable: som.sh
        args: "-cp core-lib/Smalltalk:core-lib/TestSuite:core-lib/SomSom/src/compiler:core-lib/SomSom/src/vm:core-lib/SomSom/src/vmobjects:core-lib/SomSom/src/interpreter:core-lib/SomSom/src/primitives core-lib/SomSom/src/vm/Main.som"


# define the benchmarks to be executed for a re-executable benchmark run
experiments:
    SOM-java:
        description: All benchmarks on SOM (Java)
        suites:
            - micro
            - macro
            - interpreter
        executions:
            - som
    SomSom:
        description: Running a few SomSom benchmarks on SOM (Java)
        suites:
            - micro-somsom
        executions:
            - somsom
